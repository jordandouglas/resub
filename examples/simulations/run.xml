<?xml version="1.0" encoding="UTF-8" standalone="no"?><beast beautitemplate="Standard" beautistatus="" namespace="beast.core:beast.evolution.alignment:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.base.evolution.alignment:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.tree.coalescent:beast.pkgmgmt:beast.base.core:beast.base.inference.util:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood" required="BEAST.base v2.7.5:BICEPS v1.1.2:bModelTest v1.3.3:OBAMA v1.1.1:ORC v1.1.2:BEASTLabs v2.0.2" version="2.7">


    <map name="Uniform" >beast.base.inference.distribution.Uniform</map>
    <map name="Exponential" >beast.base.inference.distribution.Exponential</map>
    <map name="LogNormal" >beast.base.inference.distribution.LogNormalDistributionModel</map>
    <map name="Normal" >beast.base.inference.distribution.Normal</map>
    <map name="Beta" >beast.base.inference.distribution.Beta</map>
    <map name="Gamma" >beast.base.inference.distribution.Gamma</map>
    <map name="LaplaceDistribution" >beast.base.inference.distribution.LaplaceDistribution</map>
    <map name="prior" >beast.base.inference.distribution.Prior</map>
    <map name="InverseGamma" >beast.base.inference.distribution.InverseGamma</map>
    <map name="OneOnX" >beast.base.inference.distribution.OneOnX</map>
    <map name="Poisson" >beast.base.inference.distribution.Poisson</map>
    <map name="Dirichlet" >beast.base.inference.distribution.Dirichlet</map>


    <!-- Use the aaRS empirical substitution model -->

   
    <model id="wag" spec="beast.base.evolution.substitutionmodel.WAG" />
    <frequencies id="aa.freqs" spec='Frequencies' frequencies="@aa.frequencies" />

    <parameter id="substModel.indicator" spec="parameter.BooleanParameter" name="stateNode" dimension="190">true</parameter>
    <substModel id="resubModel" spec="resub.substitutionmodel.SingleTransitionResub" useResub="@useResub"  state1="$(state1)" state2="$(state2)" h1="@transitionHeight" pi="@transitionPi" frequencies="@aa.freqs" refine="@aaRefine" expand="@aaExpand" substModel="@svs.substModel" /> 

    <substModel id="svs.substModel" spec="resub.substitutionmodel.SVSGeneralSubstitutionModel" rates="@aa.rates" symmetric="true" rateIndicator="@substModel.indicator">
        <frequencies idref="aa.freqs" />
    </substModel>


    <data id="data" spec="beast.base.evolution.alignment.Alignment">
        <userDataType id="aaDataType" spec='beast.base.evolution.datatype.Aminoacid' />
        $(seq-data)
    </data>



    <!-- <run id="mcmc" spec="coupledMCMC.CoupledMCMC" chains="4" resampleEvery="10000" chainLength="5000000"> -->
    <run id="mcmc" spec="MCMC" chainLength="5000000">
        <state id="state" spec="State" storeEvery="100000">

    <parameter id="aa.rates" spec="parameter.RealParameter" name="stateNode" dimension="190">
                   4.432 0.3791 0.5617 0.3362 2.015 0.4722 0.2673 0.4467 0.321 1.228 0.3354 0.8666 0.6356 0.3921 3.992 1.748 2.319 0.1529 0.5584 0.2803 0.1374 0.9365 0.72 0.5864 0.5093 0.1167 1.795 1.164 2.392 0.5706 0.3118 0.5543 3.314 2.908 4.416 0.5549 0.7716 3.573 0.01 0.9316 0.5865 0.01 0.8569 0.01 0.01 4.696 0.439 0.9639 0.2175 1.326 0.569 0.1409 0.2392 0.1486 0.1159 0.1641 0.4819 0.01 1.411 0.1136 0.08969 1.256 0.327 2.988 0.4909 0.6071 0.5711 0.2406 0.01 0.1393 0.01 0.9002 1.036 0.01 1.698 1.859 0.01 0.07376 0.01 0.07911 0.1126 0.1634 0.7343 2.039 5.874 0.2773 0.01 0.4422 0.03281 0.1001 1.566 0.2708 0.1631 0.07232 1.353 0.3508 0.01 0.09905 0.06602 0.2757 0.7037 0.2954 0.4792 4.619 0.2693 2.937 0.8973 1.689 1.271 0.3938 0.844 3.762 0.1303 3.875 3.457 0.1901 0.1478 0.3567 0.1924 0.01 0.7648 8.736 0.09717 0.2367 0.2786 0.4948 2.082 0.7338 3.489 4.43 1.33 0.8052 0.2321 0.01 0.4391 5.448 0.153 0.1993 0.5316 0.2138 0.115 0.5175 1.843 0.3811 0.479 0.2044 0.2669 2.433 0.3585 0.6762 1.537 1.743 0.7427 0.7593 0.6591 2.387 1.513 3.206 1.63 0.3433 0.09767 1.115 0.3913 0.2988 1.019 0.7811 0.4544 0.09392 0.26 1.398 1.005 1.187 0.3361 0.4068 0.3809 0.8003 0.5168 0.1538 0.3695 0.2763 5.064 0.4246 0.3724 0.2348 2.892 0.4379 0.5008 0.2431 0.5531 2.117
    </parameter>
            <!-- <tree id="tree" name="stateNode">



                <trait id="traitsetDate" spec="beast.base.evolution.tree.TraitSet" traitname="date-backward" taxa="@taxonset">
                11=0.1,
                18=0.1          
                </trait>

                <taxonset id="taxonset" spec="beast.base.evolution.alignment.TaxonSet">
                    <data idref="data" name="alignment"/>
                </taxonset>
            </tree> -->



            <!-- Start at the true tree so we can rule out bad mixing.  -->
            <stateNode spec="beast.base.evolution.tree.TreeParser" id="tree" IsLabelledNewick="true" adjustTipHeights="false" newick="$(tree)" />


           
            <parameter id="lambda" spec="parameter.RealParameter" name="stateNode" lower="0">1</parameter>


            <parameter id="gammaShape" spec="parameter.RealParameter" name="stateNode" lower="0">1</parameter>
            <parameter id="aa.frequencies" spec="parameter.RealParameter" name="stateNode" lower="0" upper="1" dimension="20">0.05</parameter>

            <parameter id="branchRates" spec="parameter.RealParameter" name="stateNode" lower="0" dimension="1">1</parameter> 
            <parameter id="clockSD" spec="parameter.RealParameter" name="stateNode" lower="0">1</parameter>

            <parameter id="useResub" spec="parameter.BooleanParameter" name="stateNode">$(useResub)</parameter>
            <parameter id="aaRefine" spec="parameter.BooleanParameter" name="stateNode">$(aaRefine)</parameter>
            <parameter id="aaExpand" spec="parameter.BooleanParameter" name="stateNode">$(aaExpand)</parameter>
            <parameter id="transitionHeight" spec="parameter.RealParameter" lower="0.0" name="stateNode">$(transitionHeight)</parameter>
            <parameter id="transitionPi" spec="parameter.RealParameter" lower="0.0" upper="1.0" name="stateNode">$(transitionPi)</parameter>


           
        </state>


        <!-- Fix tree -->
         <!-- <init estimate="false" id="RandomTree" initial="@tree" spec="beast.base.evolution.tree.coalescent.RandomTree" /> -->

        <distribution id="posterior" spec="CompoundDistribution">
            <distribution id="prior" spec="CompoundDistribution">
               


              


                  <distribution id="YuleModel" spec="beast.base.evolution.speciation.YuleModel" birthDiffRate="@lambda" tree="@tree"/>


                 <prior name="distribution" x="@aa.rates">
                    <LogNormal name="distr" meanInRealSpace="true" M="1" S="1"/>
                 </prior>


                 <prior name="distribution" x="@lambda">
                    <LogNormal  name="distr" meanInRealSpace="true" M="2" S="0.2"/>
                 </prior>



                <prior name="distribution" x="@gammaShape">
                    <Exponential name="distr" mean="1"/>
                 </prior> 

                <prior name="distribution" x="@aa.frequencies">
                    <Dirichlet name="distr">
                        <parameter spec="parameter.RealParameter" dimension="20" lower="0.0" name="alpha" upper="0.0">4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0</parameter>
                    </Dirichlet>
                 </prior> 

 


                 <prior name="distribution" x="@clockSD">
                    <Gamma name="distr" alpha="5" beta="0.05"/>
                 </prior> 




                <prior id="transitionPi.prior" name="distribution" x="@transitionPi">
                     <Beta alpha="2" beta="2" name="distr" />
                 </prior>


                <distribution id="transitionHeight.prior" spec="resub.math.BetaRange" x="@transitionHeight" lower="0" alpha="2" beta="2">
                    <upper spec="beast.base.evolution.tree.TreeHeightLogger" tree="@tree"/>
                </distribution>


                 <prior name="distribution" spec="gammaspike.distribution.BranchRatePrior" branchRates="@branchRates" tree="@tree" sigma="@clockSD"/>




            </distribution>

             <distribution id="likelihood" spec="beast.base.inference.CompoundDistribution">



                <!-- <distribution data="@data" id="treeLikelihood" spec="TreeLikelihood" tree="@tree"> -->

                <!-- If you don't have beagle installed, comment out the four lines below, and uncomment the one above -->
                <distribution data="@data" id="treeLikelihood" spec="resub.likelihood.EpochBeagleTreeLikelihood" tree="@tree">
                        <epochDates idref="transitionHeight" />
                        <model idref="svs.substModel" />
                        <model idref="resubModel" />

                        <siteModel spec='beast.base.evolution.sitemodel.SiteModel' shape="@gammaShape" gammaCategoryCount="4">
                            <substModel spec="beast.base.evolution.substitutionmodel.WAG" />
                       </siteModel>

                    <branchRateModel id="clockModel" spec="beast.base.evolution.branchratemodel.UCRelaxedClockModel" clock.rate="1.0" tree="@tree" rates="@branchRates">
                        <LogNormal id="ORCLogNormalDistributionModel.c:$(n)" M="1" S="$(clockSD)" meanInRealSpace="true" name="distr" />
                   </branchRateModel>
                    
                </distribution>


            </distribution>

        </distribution>


        <!-- Tree operators -->
        <operator id="YuleModelTreeRootScaler.tclass1" spec="kernel.BactrianScaleOperator" rootOnly="true" scaleFactor="0.5" tree="@tree" upper="10.0" weight="3.0"/>
        <operator id="YuleModelUniformOperator.tclass1" spec="kernel.BactrianNodeOperator" tree="@tree" weight="30.0"/>
        <operator id="YuleModelSubtreeSlide.tclass1" spec="kernel.BactrianSubtreeSlide" tree="@tree" weight="15.0"/>
        <operator id="YuleModelNarrow.tclass1" spec="Exchange" tree="@tree" weight="30.0"/>
        <operator id="YuleModelWide.tclass1" spec="Exchange" isNarrow="false" tree="@tree" weight="3.0"/>
        <operator id="YuleModelWilsonBalding.tclass1" spec="WilsonBalding" tree="@tree" weight="3.0"/>
        <operator id="YuleModelBICEPSEpochTop.tclass1" spec="EpochFlexOperator" scaleFactor="0.1" tree="@tree" weight="2.0"/>
        <operator id="YuleModelBICEPSEpochAll.tclass1" spec="EpochFlexOperator" fromOldestTipOnly="false" scaleFactor="0.1" tree="@tree" weight="2.0"/>
        <operator id="YuleModelBICEPSTreeFlex.tclass1" spec="TreeStretchOperator" scaleFactor="0.01" tree="@tree" weight="2.0"/>


        <operator id="_gammaShapeScaler.s:dna" spec="ScaleOperator" parameter="@gammaShape" scaleFactor="0.5" weight="1"/>


        <!-- Resub operators -->
        <operator id="aaExpand.flipper" spec="beast.base.inference.operator.BitFlipOperator" parameter="@aaExpand" uniform="false" weight="5.0"/>
        <operator id="aaRefine.flipper" spec="beast.base.inference.operator.BitFlipOperator" parameter="@aaRefine" uniform="false" weight="5.0"/>
        <operator id="useResub.flipper" spec="BitFlipOperator" uniform="true" parameter="@useResub" weight="5.0" />



        <operator id="transitionHeight.interval" spec="resub.operator.VariableRangeBactrianIntervalOperator" parameter="@transitionHeight" scaleFactor="0.1" lower="0" upper="@treeHeight" weight="3"/>  
        <operator id="updown" spec="beast.base.inference.operator.kernel.BactrianUpDownOperator" scaleFactor="0.5" weight="3.0">
            <down idref="tree" />
            <down idref="transitionHeight" />
        </operator>

        


        <!-- Site/clock model operators -->
        <operator id="clockSD.scale" spec="kernel.BactrianScaleOperator" parameter="@clockSD" scaleFactor="0.1" weight="5.0"/>
        <operator id="ORCAdaptableOperatorSampler_rates_internal.c:tree" spec="AdaptableOperatorSampler" weight="20.0">
            <parameter idref="branchRates"/>
            <tree idref="tree"/>
            <operator id="ConstantDistanceOperator" spec="orc.consoperators.InConstantDistanceOperator" twindowSize="0.005" tree="@tree" rates="@branchRates" clockModel="@clockModel" weight="10.0"/>
            <operator id="ORCRatesRandomWalk.c:tree" spec="operator.kernel.BactrianRandomWalkOperator" parameter="@branchRates" scaleFactor="0.1" weight="1.0" />
            <operator id="ORCRatesScale.c:tree" spec="kernel.BactrianScaleOperator" parameter="@branchRates" scaleFactor="0.5" upper="10.0" weight="1.0" />
        </operator>


      <!--   <operator id="aa.rates.scale" spec="kernel.BactrianScaleOperator" parameter="@aa.rates" scaleFactor="0.1" weight="1.0"/>
        <operator id="AVMN.substmodel" spec="kernel.AdaptableVarianceMultivariateNormalOperator" beta="0.05" burnin="500" initial="1000" weight="3.0">
            <transformations spec="operator.kernel.Transform$LogTransform">
                 <f idref="aa.rates"/>
            </transformations>
        </operator>  -->


        <!-- Tree prior operators -->
        <operator id="lambda.scale1" spec="kernel.BactrianScaleOperator" parameter="@lambda" scaleFactor="0.1" weight="2"/>
       

     
        <operator id="transitionPi.uniform" spec="UniformOperator" parameter="@transitionPi" weight="5.0"/>


        <logger id="tracelog" spec="Logger" fileName="$(filebase).log" logEvery="5000" model="@posterior" sanitiseHeaders="true" sort="smart">
            <log idref="posterior"/>
            <log idref="treeLikelihood"/>
            <log idref="prior"/>
            <log idref="lambda"/>

            <log idref="useResub"/>
            <log idref="resubModel"/>

            <log idref="aa.frequencies"/>
            <log idref="transitionHeight"/>
            <log idref="transitionPi" />

            <log idref="gammaShape"/>


            <log id="treeHeight" spec="beast.base.evolution.tree.TreeStatLogger" tree="@tree"/>
            <log idref="clockSD"/>

            

        </logger>
        <logger id="screenlog" spec="Logger" logEvery="5000">
            <log idref="likelihood"/>
            <log idref="treeHeight" />
            <log idref="resubModel"/>
            <log idref="transitionHeight"/>
        </logger>

        <logger id="treelog" spec="Logger" fileName="stumped.trees" logEvery="100000" mode="tree">
            <log id="TreeWithMetaDataLogger.t:class1" spec="gammaspike.logger.StumpedTreeLogger" tree="@tree">
                <metadata idref="branchRates" />
            </log>
        </logger> 

        <operatorschedule id="OperatorSchedule" spec="OperatorSchedule" autoOptimizeDelay="5000"/>
    </run>

</beast>
